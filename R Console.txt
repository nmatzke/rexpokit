
R version 3.4.1 (2017-06-30) -- "Single Candle"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

Loading required package: rJava

Sys.getenv("R_MAX_NUM_DLLS"):	[1] "153"
Loading ~/.Rprofile...
Currently viewed PATH:
[R.app GUI 1.70 (7375) x86_64-apple-darwin15.6.0]

[History restored from /Users/nickm/.Rapp.history]

/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/texbin
> 
> 
> 
> #######################################################
> # Example simulation and SSEsim
> #######################################################
> # Load the package (after installation, see above).
> library(optimx)         # You need to have some version of optimx available
>                         # as it is a BioGeoBEARS dependency; however, if you
>                         # don't want to use optimx, and use optim() (from R core) 
>                         # you can set:
>                         # BioGeoBEARS_run_object$use_optimx = FALSE
>                         # ...everything should work either way -- NJM 2014-01-08
> library(FD)       # for FD::maxent() (make sure this is up-to-date)
Loading required package: ade4
Loading required package: ape
Loading required package: geometry
Loading required package: magic
Loading required package: abind
Loading required package: vegan
Loading required package: permute
Loading required package: lattice
This is vegan 2.4-3

Attaching package: ‘vegan’

The following object is masked from ‘package:ade4’:

    cca

> library(snow)     # (if you want to use multicore functionality; some systems/R versions prefer library(parallel), try either)
> library(parallel)

Attaching package: ‘parallel’

The following objects are masked from ‘package:snow’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ, clusterExport, clusterMap, clusterSplit,
    makeCluster, parApply, parCapply, parLapply, parRapply, parSapply, splitIndices, stopCluster

> library(BioGeoBEARS)
Loading required package: rexpokit

Attaching package: ‘rexpokit’

The following object is masked from ‘package:FD’:

    maxent

Loading required package: cladoRcpp
Loading required package: phylobase
Warning: namespace ‘DBI’ is not available and has been replaced
by .GlobalEnv when processing object ‘env’
Warning: namespace ‘DBI’ is not available and has been replaced
by .GlobalEnv when processing object ‘env’
Warning: namespace ‘DBI’ is not available and has been replaced
by .GlobalEnv when processing object ‘env’
Warning: namespace ‘DBI’ is not available and has been replaced
by .GlobalEnv when processing object ‘env’
Warning: namespace ‘DBI’ is not available and has been replaced
by .GlobalEnv when processing object ‘env’
Warning: namespace ‘DBI’ is not available and has been replaced
by .GlobalEnv when processing object ‘env’
Warning: namespace ‘DBI’ is not available and has been replaced
by .GlobalEnv when processing object ‘env’
Warning: namespace ‘DBI’ is not available and has been replaced
by .GlobalEnv when processing object ‘env’
Warning: namespace ‘DBI’ is not available and has been replaced
by .GlobalEnv when processing object ‘env’
Warning: namespace ‘DBI’ is not available and has been replaced
by .GlobalEnv when processing object ‘env’
Warning: namespace ‘DBI’ is not available and has been replaced
by .GlobalEnv when processing object ‘env’

Attaching package: ‘phylobase’

The following object is masked from ‘package:ape’:

    edges

> 
> ########################################################
> # TO GET THE OPTIMX/OPTIM FIX, AND THE UPPASS FIX, 
> # SOURCE THE REVISED FUNCTIONS WITH THESE COMMANDS
> #
> # CRUCIAL CRUCIAL CRUCIAL: 
> # YOU HAVE TO RUN THE SOURCE COMMANDS AFTER 
> # *EVERY TIME* YOU DO library(BioGeoBEARS). THE CHANGES ARE NOT "PERMANENT", 
> # THEY HAVE TO BE MADE EACH TIME.  IF YOU ARE GOING TO BE OFFLINE, 
> # YOU CAN DOWNLOAD EACH .R FILE TO YOUR HARD DRIVE AND REFER THE source()
> # COMMANDS TO THE FULL PATH AND FILENAME OF EACH FILE ON YOUR
> # LOCAL SYSTEM INSTEAD.
> ########################################################
> # library(BioGeoBEARS)
> # source("http://phylo.wdfiles.com/local--files/biogeobears/cladoRcpp.R") # (needed now that traits model added; source FIRST!)
> # source("http://phylo.wdfiles.com/local--files/biogeobears/BioGeoBEARS_add_fossils_randomly_v1.R")
> # source("http://phylo.wdfiles.com/local--files/biogeobears/BioGeoBEARS_basics_v1.R")
> # source("http://phylo.wdfiles.com/local--files/biogeobears/BioGeoBEARS_calc_transition_matrices_v1.R")
> # source("http://phylo.wdfiles.com/local--files/biogeobears/BioGeoBEARS_classes_v1.R")
> # source("http://phylo.wdfiles.com/local--files/biogeobears/BioGeoBEARS_detection_v1.R")
> # source("http://phylo.wdfiles.com/local--files/biogeobears/BioGeoBEARS_DNA_cladogenesis_sim_v1.R")
> # source("http://phylo.wdfiles.com/local--files/biogeobears/BioGeoBEARS_extract_Qmat_COOmat_v1.R")
> # source("http://phylo.wdfiles.com/local--files/biogeobears/BioGeoBEARS_generics_v1.R")
> # source("http://phylo.wdfiles.com/local--files/biogeobears/BioGeoBEARS_models_v1.R")
> # source("http://phylo.wdfiles.com/local--files/biogeobears/BioGeoBEARS_on_multiple_trees_v1.R")
> # source("http://phylo.wdfiles.com/local--files/biogeobears/BioGeoBEARS_plots_v1.R")
> # source("http://phylo.wdfiles.com/local--files/biogeobears/BioGeoBEARS_readwrite_v1.R")
> # source("http://phylo.wdfiles.com/local--files/biogeobears/BioGeoBEARS_simulate_v1.R")
> # source("http://phylo.wdfiles.com/local--files/biogeobears/BioGeoBEARS_SSEsim_makePlots_v1.R")
> # source("http://phylo.wdfiles.com/local--files/biogeobears/BioGeoBEARS_SSEsim_v1.R")
> # source("http://phylo.wdfiles.com/local--files/biogeobears/BioGeoBEARS_stochastic_mapping_v1.R")
> # source("http://phylo.wdfiles.com/local--files/biogeobears/BioGeoBEARS_stratified_v1.R")
> # source("http://phylo.wdfiles.com/local--files/biogeobears/BioGeoBEARS_univ_model_v1.R")
> # source("http://phylo.wdfiles.com/local--files/biogeobears/calc_uppass_probs_v1.R")
> # source("http://phylo.wdfiles.com/local--files/biogeobears/calc_loglike_sp_v01.R")
> # source("http://phylo.wdfiles.com/local--files/biogeobears/get_stratified_subbranch_top_downpass_likelihoods_v1.R")
> # source("http://phylo.wdfiles.com/local--files/biogeobears/runBSM_v1.R")
> # source("http://phylo.wdfiles.com/local--files/biogeobears/stochastic_map_given_inputs.R")
> # source("http://phylo.wdfiles.com/local--files/biogeobears/summarize_BSM_tables_v1.R")
> # source("http://phylo.wdfiles.com/local--files/biogeobears/BioGeoBEARS_traits_v1.R") # added traits model
> # calc_loglike_sp = compiler::cmpfun(calc_loglike_sp_prebyte)    # crucial to fix bug in uppass calculations
> # calc_independent_likelihoods_on_each_branch = compiler::cmpfun(calc_independent_likelihoods_on_each_branch_prebyte)
>     # slight speedup hopefully
> 
> #######################################################
> # Local source()-ing method -- uses BioGeoBEARS sourceall() function 
> # on a directory of .R files, so you don't have to type them out.
> # The directories here are on my machine, you would have to make a 
> # directory, save the .R files there, and refer to them.
> #
> # NOTE: it's best to source the "cladoRcpp.R" update first, to avoid warnings like this:
> ##
> ## Note: possible error in 'rcpp_calc_anclikes_sp_COOweights_faster(Rcpp_leftprobs = tmpca_1, ': 
> ##         unused arguments (m = m, m_null_range = include_null_range, jts_matrix = jts_matrix) 
> ##
> #
> # TO USE: Delete or comment out the 'source("http://...")' commands above, and un-comment
> #              the below...
> ########################################################################
> # Un-comment (and fix directory paths) to use:
> library(BioGeoBEARS)
> source("/drives/Dropbox/_njm/__packages/cladoRcpp_setup/cladoRcpp.R")
Loading required package: roxygen2
> sourceall("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/")

Sourcing Rfiles in /drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/...
Sourcing Rfile: _matrix_utils_v1.R
Sourcing Rfile: BioGeoBEARS_add_fossils_randomly_v1.R
Sourcing Rfile: BioGeoBEARS_basics_v1.R
Sourcing Rfile: BioGeoBEARS_calc_transition_matrices_v1.R
Sourcing Rfile: BioGeoBEARS_classes_v1.R
Sourcing Rfile: BioGeoBEARS_detection_v1.R
Sourcing Rfile: BioGeoBEARS_DNA_cladogenesis_sim_v1.R
Sourcing Rfile: BioGeoBEARS_extract_Qmat_COOmat_v1.R
Sourcing Rfile: BioGeoBEARS_generics_v1.R
Sourcing Rfile: BioGeoBEARS_models_v1.R
Sourcing Rfile: BioGeoBEARS_on_multiple_trees_v1.R
Sourcing Rfile: BioGeoBEARS_plots_v1.R
Sourcing Rfile: BioGeoBEARS_readwrite_v1.R
Sourcing Rfile: BioGeoBEARS_simulate_v1.R
Sourcing Rfile: BioGeoBEARS_SSEsim_makePlots_v1.R
Sourcing Rfile: BioGeoBEARS_SSEsim_v1.R
Sourcing Rfile: BioGeoBEARS_stochastic_mapping_v1.R
Sourcing Rfile: BioGeoBEARS_stratified_v1.R
Sourcing Rfile: BioGeoBEARS_traits_v1.R
Sourcing Rfile: BioGeoBEARS_univ_model_v1.R
Sourcing Rfile: BioGeoChrono_v1.R
Sourcing Rfile: calc_loglike_sp_v01.R
Sourcing Rfile: calc_uppass_probs_v1.R
Sourcing Rfile: ChromoBEARS_v1.R
Sourcing Rfile: get_stratified_subbranch_top_downpass_likelihoods_v1.R
Sourcing Rfile: runBSM_v1.R
Sourcing Rfile: stochastic_map_given_inputs.R
Sourcing Rfile: summarize_BSM_tables_v1.R

Done sourcing Rfiles in /drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/...
[1] "/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/"
> calc_loglike_sp = compiler::cmpfun(calc_loglike_sp_prebyte)    # crucial to fix bug in uppass calculations
> calc_independent_likelihoods_on_each_branch = compiler::cmpfun(calc_independent_likelihoods_on_each_branch_prebyte)
> ########################################################################
> 
> 
> 
> 
> 
> 
> #######################################################
> # Set up the simulation parameters
> #######################################################
> #wd = "/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/inst/extdata/examples_new/Psychotria_M0_unconstrained/BGB/"
> wd = "/drives/GDrive/__GDrive_projects/2016-12-07_Kristina_Klaus_Podocarpaceae/_sims/sims1/"
> setwd(wd)
> 
> # Set up simulation parameters
> # dvals = c(0, 0.03, 0.15)
> # evals = c(0, 0.03, 0.15)
> # jvals = c(0, 0.02, 0.1, 0.3)
> # brates_sim = 0.3
> # drates_sim = c(0, 0.1, 0.3)
> # b_exp = c(0, 1)
> # d_exp = c(0, -1)
> 
> # Set up simulation parameters
> dvals = c(0, 0.03)
> evals = c(0, 0.03)
> jvals = c(0, 0.02, 0.1)
> brates_sim = 0.3
> drates_sim = c(0, 0.1, 0.3)
> b_exp = c(0, 1)
> d_exp = c(0, -1)
> 
> # Set up trait simulation parameters
> m1 = c(0.1)
> m2 = c(1)
> t12 = c(0.05)
> t21 = c(0.01)
> 
> 
> # Without traits
> #dej_params = expand.grid(dvals, evals, jvals, brates_sim, drates_sim, b_exp, d_exp)
> #names(dej_params) = c("d", "e", "j", "brate", "drate", "b_exp", "d_exp")
> 
> # With traits
> dej_params = expand.grid(dvals, evals, jvals, brates_sim, drates_sim, b_exp, d_exp, m1, m2, t12, t21)
> names(dej_params) = c("d", "e", "j", "brate", "drate", "b_exp", "d_exp", "m1", "m2", "t12", "t21")
> 
> keepTF = dej_params$d >= dej_params$e
> dej_params = dej_params[keepTF, ]
> 
> # Remove all zeros
> keepTF = (dej_params$d + dej_params$e + dej_params$j) > 0
> dej_params = dej_params[keepTF, ]
> dej_params
       d    e    j brate drate b_exp d_exp  m1 m2  t12  t21
2   0.03 0.00 0.00   0.3   0.0     0     0 0.1  1 0.05 0.01
4   0.03 0.03 0.00   0.3   0.0     0     0 0.1  1 0.05 0.01
5   0.00 0.00 0.02   0.3   0.0     0     0 0.1  1 0.05 0.01
6   0.03 0.00 0.02   0.3   0.0     0     0 0.1  1 0.05 0.01
8   0.03 0.03 0.02   0.3   0.0     0     0 0.1  1 0.05 0.01
9   0.00 0.00 0.10   0.3   0.0     0     0 0.1  1 0.05 0.01
10  0.03 0.00 0.10   0.3   0.0     0     0 0.1  1 0.05 0.01
12  0.03 0.03 0.10   0.3   0.0     0     0 0.1  1 0.05 0.01
14  0.03 0.00 0.00   0.3   0.1     0     0 0.1  1 0.05 0.01
16  0.03 0.03 0.00   0.3   0.1     0     0 0.1  1 0.05 0.01
17  0.00 0.00 0.02   0.3   0.1     0     0 0.1  1 0.05 0.01
18  0.03 0.00 0.02   0.3   0.1     0     0 0.1  1 0.05 0.01
20  0.03 0.03 0.02   0.3   0.1     0     0 0.1  1 0.05 0.01
21  0.00 0.00 0.10   0.3   0.1     0     0 0.1  1 0.05 0.01
22  0.03 0.00 0.10   0.3   0.1     0     0 0.1  1 0.05 0.01
24  0.03 0.03 0.10   0.3   0.1     0     0 0.1  1 0.05 0.01
26  0.03 0.00 0.00   0.3   0.3     0     0 0.1  1 0.05 0.01
28  0.03 0.03 0.00   0.3   0.3     0     0 0.1  1 0.05 0.01
29  0.00 0.00 0.02   0.3   0.3     0     0 0.1  1 0.05 0.01
30  0.03 0.00 0.02   0.3   0.3     0     0 0.1  1 0.05 0.01
32  0.03 0.03 0.02   0.3   0.3     0     0 0.1  1 0.05 0.01
33  0.00 0.00 0.10   0.3   0.3     0     0 0.1  1 0.05 0.01
34  0.03 0.00 0.10   0.3   0.3     0     0 0.1  1 0.05 0.01
36  0.03 0.03 0.10   0.3   0.3     0     0 0.1  1 0.05 0.01
38  0.03 0.00 0.00   0.3   0.0     1     0 0.1  1 0.05 0.01
40  0.03 0.03 0.00   0.3   0.0     1     0 0.1  1 0.05 0.01
41  0.00 0.00 0.02   0.3   0.0     1     0 0.1  1 0.05 0.01
42  0.03 0.00 0.02   0.3   0.0     1     0 0.1  1 0.05 0.01
44  0.03 0.03 0.02   0.3   0.0     1     0 0.1  1 0.05 0.01
45  0.00 0.00 0.10   0.3   0.0     1     0 0.1  1 0.05 0.01
46  0.03 0.00 0.10   0.3   0.0     1     0 0.1  1 0.05 0.01
48  0.03 0.03 0.10   0.3   0.0     1     0 0.1  1 0.05 0.01
50  0.03 0.00 0.00   0.3   0.1     1     0 0.1  1 0.05 0.01
52  0.03 0.03 0.00   0.3   0.1     1     0 0.1  1 0.05 0.01
53  0.00 0.00 0.02   0.3   0.1     1     0 0.1  1 0.05 0.01
54  0.03 0.00 0.02   0.3   0.1     1     0 0.1  1 0.05 0.01
56  0.03 0.03 0.02   0.3   0.1     1     0 0.1  1 0.05 0.01
57  0.00 0.00 0.10   0.3   0.1     1     0 0.1  1 0.05 0.01
58  0.03 0.00 0.10   0.3   0.1     1     0 0.1  1 0.05 0.01
60  0.03 0.03 0.10   0.3   0.1     1     0 0.1  1 0.05 0.01
62  0.03 0.00 0.00   0.3   0.3     1     0 0.1  1 0.05 0.01
64  0.03 0.03 0.00   0.3   0.3     1     0 0.1  1 0.05 0.01
65  0.00 0.00 0.02   0.3   0.3     1     0 0.1  1 0.05 0.01
66  0.03 0.00 0.02   0.3   0.3     1     0 0.1  1 0.05 0.01
68  0.03 0.03 0.02   0.3   0.3     1     0 0.1  1 0.05 0.01
 [ reached getOption("max.print") -- omitted 51 rows ]
> 
> tail(dej_params)
       d    e    j brate drate b_exp d_exp  m1 m2  t12  t21
137 0.00 0.00 0.02   0.3   0.3     1    -1 0.1  1 0.05 0.01
138 0.03 0.00 0.02   0.3   0.3     1    -1 0.1  1 0.05 0.01
140 0.03 0.03 0.02   0.3   0.3     1    -1 0.1  1 0.05 0.01
141 0.00 0.00 0.10   0.3   0.3     1    -1 0.1  1 0.05 0.01
142 0.03 0.00 0.10   0.3   0.3     1    -1 0.1  1 0.05 0.01
144 0.03 0.03 0.10   0.3   0.3     1    -1 0.1  1 0.05 0.01
> 
> # Remove all zeros
> tmpadd = ((dej_params$b_exp == 0) + (dej_params$d_exp == -1))
> tail(tmpadd)
[1] 1 1 1 1 1 1
> 
> remove_TF = tmpadd == 2
> keepTF = remove_TF == FALSE
> dej_params = dej_params[keepTF, ]
> dim(dej_params)
[1] 72 11
> 
> 
> tmpadd = (dej_params$b_exp == 1) + (dej_params$d_exp == 0)
> remove_TF = tmpadd == 2
> keepTF = remove_TF == FALSE
> dej_params = dej_params[keepTF, ]
> 
> # Set up the seed
> seedval = 54321
> seedres = set.seed(seedval)
> 
> dim(dej_params)
[1] 48 11
> 
> save(dej_params, file="dej_params.Rdata")
> 
> 
> 
> 
> #######################################################
> # Set up the simulation inputs
> #######################################################
> # 100 sims per parameter combination
> numsims = 3
> 
> simspath = "/drives/GDrive/__GDrive_projects/2016-12-07_Kristina_Klaus_Podocarpaceae/_sims/sims1/"
> param_iter = 1
> simnum = 1
> simcount = 0
> 
> num_cores_to_use = 1
> if (.Platform$GUI != "AQUA" && num_cores_to_use > 1)
+ 	{
+ 	cluster_already_open = makeCluster(rep("localhost",num_cores_to_use), type = "SOCK")
+ 	cat("Started cluster with ", num_cores_to_use, " cores.\n\n", sep="")
+ 	} else {
+ 	cluster_already_open = NULL
+ 	}
> # This sets the recursion limit
> options("expressions") # default 5000
$expressions
[1] 5000

> options(expressions=15000) # default 5000
> 
> 
> 
> #######################################################
> # BEGIN THE SIMULATION FOR-LOOP
> #######################################################
> # There are only 6 parameter combinations here
> # in this _basic_example
> # for (param_iter in 6:6)
> 
> #trait_fn = NULL	# for no traits
> trait_fn = 2			# for a randomly-generated traits file with 2 states
> #trait_fn = fn			# for a given traits file
> 
> 
> param_iter = 1
> simnum = 1
> #for (param_iter in 1:nrow(dej_params))
> #	{
> #	for (simnum in 1:numsims)
> #		{
> 		simcount = ((param_iter-1) * numsims) + simnum
> 		simcount
[1] 1
> 
> 		#######################################################
> 		# Set up simulation directory
> 		#######################################################
> 		# make e.g. 0001
> 		ps_count_txt = sprintf("%04.0f", param_iter)
> 		simcount_txt = sprintf("%03.0f", simnum)
> 
> 		simdir = paste(simspath, "ps", ps_count_txt, "_sim", simcount_txt, sep="")
> 		simdir
[1] "/drives/GDrive/__GDrive_projects/2016-12-07_Kristina_Klaus_Podocarpaceae/_sims/sims1/ps0001_sim001"
> 
> 
> 		txt = paste("\nSimulation #", simcount, " in ", simdir, "/", "\n", sep="")
> 		cat(txt)

Simulation #1 in /drives/GDrive/__GDrive_projects/2016-12-07_Kristina_Klaus_Podocarpaceae/_sims/sims1/ps0001_sim001/
> 
> 
> 		dir.create(path=simdir, showWarnings=FALSE)
> 		setwd(simdir)
> 		list.files(simdir)
 [1] "data"                           "DECJ_inf.Rdata"                 "geog_sim_complete.txt"         
 [4] "geog_sim_observed.txt"          "geog.data"                      "obj2.newick"                   
 [7] "random_traits_file.data"        "simtr_complete.newick"          "simtr_observed.newick"         
[10] "SSEsim_results_processed.Rdata" "tree.newick"                   
> 
> 
> 		#######################################################
> 		# Put parameters into simulation
> 		#######################################################
> 		# Starter -- don't use
> 		SSEsim_inputs = SSEsim_setup_inputs()
Read 6 items
Read 38 items
Found more than one class "tipranges" in cache; using the first, from namespace 'BioGeoBEARS'
Also defined by ‘.GlobalEnv’
Read 6 items
Read 38 items
> 
> 		# Set up the BD / SSE parameters
> 		SSEsim_inputs$SSEmodel$brate = dej_params$brate[param_iter]
> 		SSEsim_inputs$SSEmodel$drate = dej_params$drate[param_iter]
> 		SSEsim_inputs$SSEmodel$rangesize_b_exponent = dej_params$b_exp[param_iter]
> 		SSEsim_inputs$SSEmodel$rangesize_d_exponent = dej_params$d_exp[param_iter]
> 
> 
> 		print(param_iter)
[1] 1
> 		print(dej_params[param_iter,])
     d e j brate drate b_exp d_exp  m1 m2  t12  t21
2 0.03 0 0   0.3     0     0     0 0.1  1 0.05 0.01
> 
> 
> 		# Set up the DEC+J parameters
> 		SSEsim_inputs$BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["d","init"] = dej_params$d[param_iter]
> 		SSEsim_inputs$BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["d","est"] = dej_params$d[param_iter]
> 
> 		SSEsim_inputs$BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["e","init"] = dej_params$e[param_iter]
> 		SSEsim_inputs$BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["e","est"] = dej_params$e[param_iter]
> 
> 		SSEsim_inputs$BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["j","init"] = dej_params$j[param_iter]
> 		SSEsim_inputs$BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["j","est"] = dej_params$j[param_iter]
> 
> 		# You gotta re-calculate with the new params;
> 		# And, add trait
> 		SSEmodel=SSEsim_inputs$SSEmodel; BioGeoBEARS_run_object=SSEsim_inputs$BioGeoBEARS_run_object; trait_fn=2
> 		SSEsim_inputs = SSEsim_setup_inputs(SSEmodel=SSEsim_inputs$SSEmodel, BioGeoBEARS_run_object=SSEsim_inputs$BioGeoBEARS_run_object, trait_fn=2)
Read 6 items
Read 38 items
Read 6 items
Read 38 items
Read 4 items
Read 38 items
Read 4 items
Read 38 items
Read 6 items
Read 38 items
Read 6 items
Read 38 items
[1] 1
[1] "traitstate_i"
[1] 2
[1] "traitstate_j"
[1] 2
[1] "traitstate_i"
[1] 1
[1] "traitstate_j"
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21]
 [1,]    0    0    0    0    0 0.00 0.00 0.00 0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00     1     0     0     0     0
 [2,]    0    0    0    0    0 0.03 0.03 0.03 0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00     0     1     0     0     0
 [3,]    0    0    0    0    0 0.03 0.00 0.00 0.03  0.03  0.00  0.00  0.00  0.00  0.00  0.00     0     0     1     0     0
 [4,]    0    0    0    0    0 0.00 0.03 0.00 0.03  0.00  0.03  0.00  0.00  0.00  0.00  0.00     0     0     0     1     0
 [5,]    0    0    0    0    0 0.00 0.00 0.03 0.00  0.03  0.03  0.00  0.00  0.00  0.00  0.00     0     0     0     0     1
 [6,]    0    0    0    0    0 0.00 0.00 0.00 0.00  0.00  0.00  0.06  0.06  0.00  0.00  0.00     0     0     0     0     0
 [7,]    0    0    0    0    0 0.00 0.00 0.00 0.00  0.00  0.00  0.06  0.00  0.06  0.00  0.00     0     0     0     0     0
 [8,]    0    0    0    0    0 0.00 0.00 0.00 0.00  0.00  0.00  0.00  0.06  0.06  0.00  0.00     0     0     0     0     0
 [9,]    0    0    0    0    0 0.00 0.00 0.00 0.00  0.00  0.00  0.06  0.00  0.00  0.06  0.00     0     0     0     0     0
[10,]    0    0    0    0    0 0.00 0.00 0.00 0.00  0.00  0.00  0.00  0.06  0.00  0.06  0.00     0     0     0     0     0
[11,]    0    0    0    0    0 0.00 0.00 0.00 0.00  0.00  0.00  0.00  0.00  0.06  0.06  0.00     0     0     0     0     0
[12,]    0    0    0    0    0 0.00 0.00 0.00 0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.09     0     0     0     0     0
[13,]    0    0    0    0    0 0.00 0.00 0.00 0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.09     0     0     0     0     0
[14,]    0    0    0    0    0 0.00 0.00 0.00 0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.09     0     0     0     0     0
[15,]    0    0    0    0    0 0.00 0.00 0.00 0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.09     0     0     0     0     0
      [,22] [,23] [,24] [,25] [,26] [,27] [,28] [,29] [,30] [,31] [,32]
 [1,]  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00
 [2,]  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00
 [3,]  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00
 [4,]  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00
 [5,]  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00
 [6,]  1.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00
 [7,]  0.00  1.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00
 [8,]  0.00  0.00  1.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00
 [9,]  0.00  0.00  0.00  1.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00
[10,]  0.00  0.00  0.00  0.00  1.00  0.00  0.00  0.00  0.00  0.00  0.00
[11,]  0.00  0.00  0.00  0.00  0.00  1.00  0.00  0.00  0.00  0.00  0.00
[12,]  0.00  0.00  0.00  0.00  0.00  0.00  1.00  0.00  0.00  0.00  0.00
[13,]  0.00  0.00  0.00  0.00  0.00  0.00  0.00  1.00  0.00  0.00  0.00
[14,]  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  1.00  0.00  0.00
[15,]  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  1.00  0.00
 [ reached getOption("max.print") -- omitted 17 rows ]
> 		names(SSEsim_inputs)
[1] "number_of_trait_states" "BioGeoBEARS_run_object" "Qmat"                   "COO_weights_columnar"  
[5] "Rsp_rowsums"            "state_indices_0based"   "ranges"                 "areanames"             
[9] "SSEmodel"              
> 		
> 		
> 		SSEsim_inputs$COO_weights_columnar
[[1]]
  [1]  0.0  1.0  2.0  3.0  4.0  4.0  5.0  5.0  6.0  6.0  7.0  7.0  8.0  8.0  9.0  9.0 10.0 10.0 10.0 11.0 11.0 11.0 12.0
 [24] 12.0 12.0 13.0 13.0 13.0 14.0 14.0 14.0 14.0  4.0  4.0  5.0  5.0  6.0  6.0  7.0  7.0  8.0  8.0  9.0  9.0 10.0 10.0
 [47] 10.0 11.0 11.0 11.0 12.0 12.0 12.0 13.0 13.0 13.0 14.0 14.0 14.0 14.0  4.0  4.0  5.0  5.0  6.0  6.0  7.0  7.0  8.0
 [70]  8.0  9.0  9.0 10.0 10.0 10.0 11.0 11.0 11.0 12.0 12.0 12.0 13.0 13.0 13.0 14.0 14.0 14.0 14.0 10.0 10.0 10.0 11.0
 [93] 11.0 11.0 12.0 12.0 12.0 13.0 13.0 13.0 14.0 14.0 14.0 14.0  8.5  9.5 10.5 11.5 12.5 12.5 13.5 13.5 14.5 14.5 15.5
[116] 15.5 16.5 16.5 17.5 17.5 18.5 18.5 18.5 19.5 19.5 19.5 20.5 20.5 20.5 21.5 21.5 21.5 22.5 22.5 22.5 22.5 12.5 12.5
[139] 13.5 13.5 14.5 14.5 15.5 15.5 16.5 16.5 17.5 17.5 18.5 18.5 18.5 19.5 19.5 19.5 20.5 20.5 20.5 21.5 21.5 21.5 22.5
[162] 22.5 22.5 22.5 12.5 12.5 13.5 13.5 14.5 14.5 15.5 15.5 16.5 16.5 17.5 17.5 18.5 18.5 18.5 19.5 19.5 19.5 20.5 20.5
[185] 20.5 21.5 21.5 21.5 22.5 22.5 22.5 22.5 18.5 18.5 18.5 19.5 19.5 19.5 20.5 20.5 20.5 21.5 21.5 21.5 22.5 22.5 22.5
[208] 22.5

[[2]]
  [1]  0.0  1.0  2.0  3.0  4.0  4.0  5.0  5.0  6.0  6.0  7.0  7.0  8.0  8.0  9.0  9.0 10.0 10.0 10.0 11.0 11.0 11.0 12.0
 [24] 12.0 12.0 13.0 13.0 13.0 14.0 14.0 14.0 14.0  0.0  1.0  0.0  2.0  0.0  3.0  1.0  2.0  1.0  3.0  2.0  3.0  0.0  1.0
 [47]  2.0  0.0  1.0  3.0  0.0  2.0  3.0  1.0  2.0  3.0  0.0  1.0  2.0  3.0  1.0  0.0  2.0  0.0  3.0  0.0  2.0  1.0  3.0
 [70]  1.0  3.0  2.0  7.0  5.0  4.0  8.0  6.0  4.0  9.0  6.0  5.0  9.0  8.0  7.0 13.0 12.0 11.0 10.0  0.0  1.0  2.0  0.0
 [93]  1.0  3.0  0.0  2.0  3.0  1.0  2.0  3.0  0.0  1.0  2.0  3.0  8.5  9.5 10.5 11.5 12.5 12.5 13.5 13.5 14.5 14.5 15.5
[116] 15.5 16.5 16.5 17.5 17.5 18.5 18.5 18.5 19.5 19.5 19.5 20.5 20.5 20.5 21.5 21.5 21.5 22.5 22.5 22.5 22.5  8.5  9.5
[139]  8.5 10.5  8.5 11.5  9.5 10.5  9.5 11.5 10.5 11.5  8.5  9.5 10.5  8.5  9.5 11.5  8.5 10.5 11.5  9.5 10.5 11.5  8.5
[162]  9.5 10.5 11.5  9.5  8.5 10.5  8.5 11.5  8.5 10.5  9.5 11.5  9.5 11.5 10.5 15.5 13.5 12.5 16.5 14.5 12.5 17.5 14.5
[185] 13.5 17.5 16.5 15.5 21.5 20.5 19.5 18.5  8.5  9.5 10.5  8.5  9.5 11.5  8.5 10.5 11.5  9.5 10.5 11.5  8.5  9.5 10.5
[208] 11.5

[[3]]
  [1]  0.0  1.0  2.0  3.0  0.0  1.0  0.0  2.0  0.0  3.0  1.0  2.0  1.0  3.0  2.0  3.0  0.0  1.0  2.0  0.0  1.0  3.0  0.0
 [24]  2.0  3.0  1.0  2.0  3.0  0.0  1.0  2.0  3.0  4.0  4.0  5.0  5.0  6.0  6.0  7.0  7.0  8.0  8.0  9.0  9.0 10.0 10.0
 [47] 10.0 11.0 11.0 11.0 12.0 12.0 12.0 13.0 13.0 13.0 14.0 14.0 14.0 14.0  0.0  1.0  0.0  2.0  0.0  3.0  1.0  2.0  1.0
 [70]  3.0  2.0  3.0  0.0  1.0  2.0  0.0  1.0  3.0  0.0  2.0  3.0  1.0  2.0  3.0  0.0  1.0  2.0  3.0  7.0  5.0  4.0  8.0
 [93]  6.0  4.0  9.0  6.0  5.0  9.0  8.0  7.0 13.0 12.0 11.0 10.0  8.5  9.5 10.5 11.5  8.5  9.5  8.5 10.5  8.5 11.5  9.5
[116] 10.5  9.5 11.5 10.5 11.5  8.5  9.5 10.5  8.5  9.5 11.5  8.5 10.5 11.5  9.5 10.5 11.5  8.5  9.5 10.5 11.5 12.5 12.5
[139] 13.5 13.5 14.5 14.5 15.5 15.5 16.5 16.5 17.5 17.5 18.5 18.5 18.5 19.5 19.5 19.5 20.5 20.5 20.5 21.5 21.5 21.5 22.5
[162] 22.5 22.5 22.5  8.5  9.5  8.5 10.5  8.5 11.5  9.5 10.5  9.5 11.5 10.5 11.5  8.5  9.5 10.5  8.5  9.5 11.5  8.5 10.5
[185] 11.5  9.5 10.5 11.5  8.5  9.5 10.5 11.5 15.5 13.5 12.5 16.5 14.5 12.5 17.5 14.5 13.5 17.5 16.5 15.5 21.5 20.5 19.5
[208] 18.5

[[4]]
  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [60] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[119] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[178] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1

> 		
> 	SSEsim_inputs = NULL
> 	
> 	# Set up the Birth Rate, Death Rate, etc.
> 	# These are the parameters for the tree, and for 
> 	# dependence of speciation/extinction on states
> 	if (is.null(SSEmodel))
+ 		{
+ 		SSEmodel = NULL
+ 		
+ 		# Birth rate (lambda)
+ 		# This is the ML estimate under Yule on the Psychotria tree
+ 		SSEmodel$brate = 0.3289132
+ 		
+ 		# Death rate (omega)
+ 		SSEmodel$drate = SSEmodel$brate/3
+ 		
+ 		# Exponent on rangesize multiplier
+ 		# Positive exponent means larger ranges have
+ 		# increased speciation rates
+ 		SSEmodel$rangesize_b_exponent = 1	
+ 
+ 		# Exponent on rangesize multiplier
+ 		# More negative exponents mean larger ranges have
+ 		# decreases extinction rates
+ 		SSEmodel$rangesize_d_exponent = -1
+ 
+ 		# To get the values out:
+ 		# 		brate = SSEmodel$brate
+ 		# 		drate = SSEmodel$drate
+ 		# 		rangesize_b_exponent = SSEmodel$rangesize_b_exponent
+ 		# 		rangesize_d_exponent = SSEmodel$rangesize_d_exponent
+ 		} # END if (is.null(SSEmodel))
> 	
> 	
> 	# Set up the BioGeoBEARS model (the model of range evolution)
> 	if (is.null(BioGeoBEARS_run_object))
+ 		{
+ 		# Use a default BioGeoBEARS_run_object, but specify some different parameters
+ 		BioGeoBEARS_run_object = define_BioGeoBEARS_run()
+ 		BioGeoBEARS_model_object = BioGeoBEARS_run_object$BioGeoBEARS_model_object
+ 		include_null_range = BioGeoBEARS_run_object$include_null_range
+ 
+ 		#######################################################
+ 		# Define the areas and states
+ 		#######################################################
+ 		# Get geographic ranges at tips
+ 		tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=np(BioGeoBEARS_run_object$geogfn))
+ 
+ 		# Get the list of geographic areas
+ 		areas = getareas_from_tipranges_object(tipranges)
+ 		areas_list = seq(0, length(areas)-1, 1)		# 0-base indexes
+ 		areanames = areas
+ 		areas
+ 		areas_list
+ 
+ 		max_range_size = length(areas)	# if Psychotria, this is 4
+ 		BioGeoBEARS_run_object$max_range_size = max_range_size
+ 		
+ 		states_list = rcpp_areas_list_to_states_list(areas=areas, maxareas=max_range_size, include_null_range=TRUE)
+ 		states_list
+ 
+ 		state_indices_0based = rcpp_areas_list_to_states_list(areas=areas, maxareas=BioGeoBEARS_run_object$max_range_size, include_null_range=TRUE)
+ 		state_indices_0based
+ 
+ 		# Get the ranges
+ 		ranges_list = areas_list_to_states_list_new(areas=areas, maxareas=length(areas),
+ 		include_null_range=include_null_range, split_ABC=FALSE)
+ 		ranges_list
+ 		ranges = unlist(ranges_list)
+ 		ranges
+ 		
+ 
+ 		###############################################
+ 		# Default params for SSEsim
+ 		###############################################
+ 		BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["d","type"] = "free"
+ 		BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["d","init"] = 0.03
+ 		BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["d","est"] = 0.03
+ 
+ 		BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["e","type"] = "free"
+ 		BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["e","init"] = 0.03
+ 		BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["e","est"] = 0.03
+ 
+ 		BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["j","type"] = "free"
+ 		BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["j","init"] = 0.1
+ 		BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["j","est"] = 0.1
+ 
+ 		BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["a","type"] = "fixed"
+ 		BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["a","init"] = 0
+ 		BioGeoBEARS_run_object$BioGeoBEARS_model_object@params_table["a","est"] = 0
+ 
+ 		} else {
+ 		# Read the input files, if any
+ 		BioGeoBEARS_run_object = readfiles_BioGeoBEARS_run(BioGeoBEARS_run_object)
+ 		include_null_range = BioGeoBEARS_run_object$include_null_range
+ 
+ 		#######################################################
+ 		# Define the areas and states
+ 		#######################################################
+ 		# Get geographic ranges at tips
+ 		tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=np(BioGeoBEARS_run_object$geogfn))
+ 
+ 		# Get the list of geographic areas
+ 		areas = getareas_from_tipranges_object(tipranges)
+ 		areas_list = seq(0, length(areas)-1, 1)		# 0-base indexes
+ 		areanames = areas
+ 		areas
+ 		areas_list
+ 
+ 		max_range_size = BioGeoBEARS_run_object$max_range_size
+ 		
+ 		states_list = rcpp_areas_list_to_states_list(areas=areas, maxareas=max_range_size, include_null_range=include_null_range)
+ 		states_list
+ 
+ 		state_indices_0based = states_list
+ 
+ 		# Get the ranges
+ 		ranges_list = areas_list_to_states_list_new(areas=areas, maxareas=length(areas),
+ 		include_null_range=include_null_range, split_ABC=FALSE)
+ 		ranges_list
+ 		ranges = unlist(ranges_list)
+ 		ranges
+ 
+ 		} # end is.null(BioGeoBEARS_run_object)
Read 6 items
Read 38 items
 [1] "_"    "K"    "O"    "M"    "H"    "KO"   "KM"   "KH"   "OM"   "OH"   "MH"   "KOM"  "KOH"  "KMH"  "OMH"  "KOMH"
> 		
> 
> 
> 
> 
> 	#######################################################
> 	# If trait_fn is NULL, skip traits (default)
> 	# If trait_fn is a number, make a fake trait_fn with that many states
> 	# Otherwise, load the given trait_fn
> 	# (This is a lazy way to set up the traits model for simulation...but who cares?)
> 	#######################################################
> 	number_of_trait_states = NULL
> 	if (!is.null(trait_fn) == TRUE)
+ 		{
+ 		if (is.numeric(trait_fn) == TRUE)
+ 			{
+ 			# Make a fake trait_fn:
+ 			number_of_trait_states = trait_fn
+ 			
+ 			# Load tree and geography
+ 			trfn = BioGeoBEARS_run_object$trfn
+ 			tr = read.tree(trfn)
+ 			geogfn = BioGeoBEARS_run_object$geogfn
+ 			tipranges = getranges_from_LagrangePHYLIP(lgdata_fn=geogfn)
+ 			trait_values = tipranges
+ 			traits_df = trait_values@df
+ 			
+ 			if (ncol(traits_df) <= number_of_trait_states)
+ 				{
+ 				traits_df = traits_df[,1:number_of_trait_states]
+ 				} else {
+ 				cols = rep(1, times=number_of_trait_states)
+ 				traits_df = traits_df[, cols]
+ 				}
+ 			
+ 			# Randomly generate trait states at tips (doesn't matter, just no blanks)
+ 			for (i in 1:nrow(traits_df))
+ 				{
+ 				statenum = sample(1:number_of_trait_states, size=1)
+ 				traits_df[i,] = rep(0, times=number_of_trait_states)
+ 				traits_df[i,][statenum] = 1
+ 				}
+ 			
+ 			names(traits_df) = LETTERS[1:number_of_trait_states]
+ 			trait_values@df = traits_df
+ 			
+ 			# Write to a traits file
+ 			trait_fn = "random_traits_file.data"
+ 			save_tipranges_to_LagrangePHYLIP(tipranges_object=trait_values, lgdata_fn=trait_fn)
+ 			} # END if (is.numeric(trait_fn) == TRUE)
+ 		
+ 		# Load the traits file (given, or random)
+ 		if (is.character(trait_fn) == TRUE)
+ 			{
+ 			# Load a given traits file
+ 			trait_values = getranges_from_LagrangePHYLIP(lgdata_fn=trait_fn)
+ 
+ 			# Add the traits data and model
+ 			BioGeoBEARS_run_object = add_trait_to_BioGeoBEARS_run_object(BioGeoBEARS_run_object, trait_fn=trait_fn)
+ 			} # END if (is.character(trait_fn) == TRUE)
+ 		} # END if (!is.null(trait_fn) == TRUE)
Read 6 items
Read 38 items
Read 4 items
Read 38 items
Read 4 items
Read 38 items
Read 6 items
Read 38 items
> 	# Store number of trait states
> 	SSEsim_inputs$number_of_trait_states = number_of_trait_states
> 		
> 	# Update linked parameters
> 	BioGeoBEARS_run_object$BioGeoBEARS_model_object = calc_linked_params_BioGeoBEARS_model_object(BioGeoBEARS_run_object$BioGeoBEARS_model_object)
> 	BioGeoBEARS_model_object = BioGeoBEARS_run_object$BioGeoBEARS_model_object
> 
> 	
> 	#######################################################
> 	# Read in the SSE params
> 	#######################################################
> 	brate = SSEmodel$brate
> 	drate = SSEmodel$drate
> 	rangesize_b_exponent = SSEmodel$rangesize_b_exponent
> 	rangesize_d_exponent = SSEmodel$rangesize_d_exponent
> 	
> 
> 
> 
> 	#######################################################
> 	# Use the anagenetic and cladogenetic parameters to make a Qmat and COOmat
> 	#######################################################	
> 	# Set the dispersal and extinction rate
> 	d = BioGeoBEARS_model_object@params_table["d","est"]
> 	e = BioGeoBEARS_model_object@params_table["e","est"]
> 	a = BioGeoBEARS_model_object@params_table["a","est"]
> 	
> 	# More inputs
> 	force_sparse = BioGeoBEARS_run_object$force_sparse
> 	areas = areas_list
> 	
> 	# Calculate the dispersal_multipliers_matrix
> 	dispersal_multipliers_matrix = dispersal_multipliers_matrix_from_BioGeoBEARS_run_object(BioGeoBEARS_run_object)
Read 6 items
Read 38 items
> 	
> 	#######################################################
> 	# multiply parameter d by dispersal_multipliers_matrix
> 	#######################################################
> 	dmat_times_d = dispersal_multipliers_matrix * matrix(d, nrow=length(areas), ncol=length(areas))
> 	amat = dispersal_multipliers_matrix * matrix(a, nrow=length(areas), ncol=length(areas))
> 
> 	#######################################################
> 	#######################################################
> 	# Do area-dependence and extinction multipliers list
> 	#######################################################
> 	#######################################################
> 	if ( (is.null(BioGeoBEARS_run_object$list_of_area_of_areas) == FALSE))
+ 		{
+ 		area_of_areas = BioGeoBEARS_run_object$list_of_area_of_areas[[1]]
+ 		} else {
+ 		# Default is all areas effectively equidistant
+ 		area_of_areas = rep(1, length(areas))
+ 		}
> 		
> 	# Get the exponent on extinction, apply to extinction modifiers	
> 	u = BioGeoBEARS_model_object@params_table["u","est"]
> 	extinction_modifier_list = area_of_areas ^ (1 * u)
> 	
> 	# Apply to extinction rate
> 	elist = extinction_modifier_list * rep(e, length(areas))
> 	
> 	# Set up the instantaneous rate matrix (Q matrix)
> 	Qmat = rcpp_states_list_to_DEmat(areas_list=areas_list, states_list=states_list, dmat=dmat_times_d, elist=elist, amat=amat, include_null_range=BioGeoBEARS_run_object$include_null_range, normalize_TF=TRUE, makeCOO_TF=force_sparse)
> 
> 
> 
> 	# Is this a traits-based analysis?
> 	traitTF = is.null(BioGeoBEARS_run_object$trait) == FALSE
> 
> 	# Analysis with a trait modifying dispersal rate
> 	if (traitTF == TRUE)
+ 		{
+ 		res = modify_Qmat_with_trait(Qmat, BioGeoBEARS_run_object, areas_list=areas_list, states_list=states_list, dispersal_multipliers_matrix=dispersal_multipliers_matrix, elist=elist, force_sparse=force_sparse)
+ 		Qmat = res$Qmat
+ 		m = res$m
+ 
+ 		# If the trait can change during jump events
+ 		jts_matrix = NULL
+ 		if (is.null(BioGeoBEARS_run_object$jts_txt_matrix) == FALSE)
+ 			{
+ 			jts_txt_matrix = BioGeoBEARS_run_object$jts_txt_matrix
+ 			jts_matrix = matrix(data=0, nrow=nrow(jts_txt_matrix), ncol=ncol(jts_txt_matrix))
+ 			TF_matrix = matrix(data=TRUE, nrow=nrow(jts_txt_matrix), ncol=ncol(jts_txt_matrix))
+ 			diag(TF_matrix) = FALSE
+ 			jts_txt_params = c(jts_txt_matrix[TF_matrix])
+ 			jts_txt_params
+ 		
+ 			# Populate the numeric jts_matrix
+ 			for (jts_i in 1:nrow(jts_txt_matrix))
+ 				{
+ 				diag_val = 1
+ 				for (jts_j in 1:ncol(jts_txt_matrix))
+ 					{
+ 					if (jts_i == jts_j)
+ 						{
+ 						next()
+ 						}
+ 					jts_txt = jts_txt_matrix[jts_i,jts_j]
+ 					newval = as.numeric(BioGeoBEARS_model_object@params_table[jts_txt, "est"])
+ 					jts_matrix[jts_i,jts_j] = newval
+ 					diag_val = 1-newval
+ 					}
+ 				# Populate the diagonal
+ 				jts_matrix[jts_i,jts_i] = diag_val
+ 				} # END for (jts_i in 1:nrow(jts_txt_matrix))
+ 			} # END if (is.null(BioGeoBEARS_run_object$jts_txt_matrix) == FALSE)
+ 		} else {
+ 		m = NULL
+ 		jts_matrix = NULL
+ 		} # END if (if (traitTF == TRUE))
[1] 1
[1] "traitstate_i"
[1] 2
[1] "traitstate_j"
[1] 2
[1] "traitstate_i"
[1] 1
[1] "traitstate_j"
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21]
 [1,]    0    0    0    0    0 0.00 0.00 0.00 0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00     1     0     0     0     0
 [2,]    0    0    0    0    0 0.03 0.03 0.03 0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00     0     1     0     0     0
 [3,]    0    0    0    0    0 0.03 0.00 0.00 0.03  0.03  0.00  0.00  0.00  0.00  0.00  0.00     0     0     1     0     0
 [4,]    0    0    0    0    0 0.00 0.03 0.00 0.03  0.00  0.03  0.00  0.00  0.00  0.00  0.00     0     0     0     1     0
 [5,]    0    0    0    0    0 0.00 0.00 0.03 0.00  0.03  0.03  0.00  0.00  0.00  0.00  0.00     0     0     0     0     1
 [6,]    0    0    0    0    0 0.00 0.00 0.00 0.00  0.00  0.00  0.06  0.06  0.00  0.00  0.00     0     0     0     0     0
 [7,]    0    0    0    0    0 0.00 0.00 0.00 0.00  0.00  0.00  0.06  0.00  0.06  0.00  0.00     0     0     0     0     0
 [8,]    0    0    0    0    0 0.00 0.00 0.00 0.00  0.00  0.00  0.00  0.06  0.06  0.00  0.00     0     0     0     0     0
 [9,]    0    0    0    0    0 0.00 0.00 0.00 0.00  0.00  0.00  0.06  0.00  0.00  0.06  0.00     0     0     0     0     0
[10,]    0    0    0    0    0 0.00 0.00 0.00 0.00  0.00  0.00  0.00  0.06  0.00  0.06  0.00     0     0     0     0     0
[11,]    0    0    0    0    0 0.00 0.00 0.00 0.00  0.00  0.00  0.00  0.00  0.06  0.06  0.00     0     0     0     0     0
[12,]    0    0    0    0    0 0.00 0.00 0.00 0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.09     0     0     0     0     0
[13,]    0    0    0    0    0 0.00 0.00 0.00 0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.09     0     0     0     0     0
[14,]    0    0    0    0    0 0.00 0.00 0.00 0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.09     0     0     0     0     0
[15,]    0    0    0    0    0 0.00 0.00 0.00 0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.09     0     0     0     0     0
      [,22] [,23] [,24] [,25] [,26] [,27] [,28] [,29] [,30] [,31] [,32]
 [1,]  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00
 [2,]  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00
 [3,]  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00
 [4,]  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00
 [5,]  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00
 [6,]  1.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00
 [7,]  0.00  1.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00
 [8,]  0.00  0.00  1.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00
 [9,]  0.00  0.00  0.00  1.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00
[10,]  0.00  0.00  0.00  0.00  1.00  0.00  0.00  0.00  0.00  0.00  0.00
[11,]  0.00  0.00  0.00  0.00  0.00  1.00  0.00  0.00  0.00  0.00  0.00
[12,]  0.00  0.00  0.00  0.00  0.00  0.00  1.00  0.00  0.00  0.00  0.00
[13,]  0.00  0.00  0.00  0.00  0.00  0.00  0.00  1.00  0.00  0.00  0.00
[14,]  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  1.00  0.00  0.00
[15,]  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  1.00  0.00
 [ reached getOption("max.print") -- omitted 17 rows ]
> 
> 
> 
> 
> 	#######################################################
> 	# Get the cladogenesis matrix
> 	#######################################################
> 	spPmat_inputs = spPmat_inputs_from_BioGeoBEARS_model_object(BioGeoBEARS_run_object, states_list, dispersal_multipliers_matrix)
> 	
> 	cppSpMethod=3
> 	numstates_in_cladogenesis_matrix=length(states_list)-1
> 	printmat=FALSE
> 	m=m
> 	include_null_range=BioGeoBEARS_run_object$include_null_range
> 	jts_matrix=NULL
> 
> spPmat_inputs$l
[[1]]
[1] 0

[[2]]
[1] 1

[[3]]
[1] 2

[[4]]
[1] 3

[[5]]
[1] 0 1

[[6]]
[1] 0 2

[[7]]
[1] 0 3

[[8]]
[1] 1 2

[[9]]
[1] 1 3

[[10]]
[1] 2 3

[[11]]
[1] 0 1 2

[[12]]
[1] 0 1 3

[[13]]
[1] 0 2 3

[[14]]
[1] 1 2 3

[[15]]
[1] 0 1 2 3

> 	spPmat_inputs$l[spPmat_inputs$l == c("_")] = NULL
> 	spPmat_inputs$l[spPmat_inputs$l == c("-")] = NULL
> 	spPmat_inputs$l[spPmat_inputs$l == c("-1")] = NULL
> 	#spPmat_inputs$l[spPmat_inputs$l == c(-1)] = NULL
> 	#	}
> 
> 	
> 	#if ( is.null(spPmat_inputs)==FALSE )
> 	#	{
> 	# Calculate the rowsums (for input into rcpp_calc_anclikes_sp()
> 	# Actually, just do this ONCE
> 
> 	# (above) Fix "l" (which is states_indices, i.e. a list of lists of state_indices)
> 	# so that there is no "null geographic range", i.e. no "_", no "-", no "NA"
> 	l = spPmat_inputs$l		# states_indices
> 	
> 	states_indices = spPmat_inputs$l
> 	
> 	s = spPmat_inputs$s
> 	v = spPmat_inputs$v
> 	j = spPmat_inputs$j
> 	y = spPmat_inputs$y
> 
> 	dmat = spPmat_inputs$dmat
> 
> 	# Take the max of the indices of the possible areas, and add 1
> 	# numareas = max(unlist(spPmat_inputs$l), na.rm=TRUE) + 1 # old, bogus
> 	numareas = max(sapply(X=spPmat_inputs$l, FUN=length), na.rm=TRUE) + 0
> 
> 	maxent01s_param = spPmat_inputs$maxent01s_param
> 	maxent01v_param = spPmat_inputs$maxent01v_param
> 	maxent01j_param = spPmat_inputs$maxent01j_param
> 	maxent01y_param = spPmat_inputs$maxent01y_param
> 
> 	maxent01s = relative_probabilities_of_subsets(max_numareas=numareas, maxent_constraint_01=maxent01s_param, NA_val=0)
> 	maxent01v = relative_probabilities_of_vicariants(max_numareas=numareas, maxent_constraint_01v=maxent01v_param, NA_val=0)
> 	maxent01j = relative_probabilities_of_subsets(max_numareas=numareas, maxent_constraint_01=maxent01j_param, NA_val=0)
> 	maxent01y = relative_probabilities_of_subsets(max_numareas=numareas, maxent_constraint_01=maxent01y_param, NA_val=0)
> 
> 	# You really need a list of sizes here:
> 
> 	# Matrix of probs for each ancsize
> 	maxprob_as_function_of_ancsize_and_decsize = mapply(FUN=max, maxent01s, maxent01v, maxent01j, maxent01y, MoreArgs=list(na.rm=TRUE))
> 	maxprob_as_function_of_ancsize_and_decsize = matrix(data=maxprob_as_function_of_ancsize_and_decsize, nrow=nrow(maxent01s), ncol=ncol(maxent01s))
> 	maxprob_as_function_of_ancsize_and_decsize[maxprob_as_function_of_ancsize_and_decsize > 0] = 1
> 	maxprob_as_function_of_ancsize_and_decsize[maxprob_as_function_of_ancsize_and_decsize <= 0] = 0
> 
> 	# Now, go through, and make a list of the max minsize for each decsize
> 	max_minsize_as_function_of_ancsize = apply(X=maxprob_as_function_of_ancsize_and_decsize, MARGIN=1, FUN=maxsize)
> 
> 
> 	tmpca_1 = rep(1, numstates_in_cladogenesis_matrix)
> 	tmpcb_1 = rep(1, numstates_in_cladogenesis_matrix)
> 
> 	# Print the matrix to screen from C++
> 	printmat = FALSE
> 
> 			params_to_print = c("tmpca_1", "tmpcb_1", "l", "s", "v", "j", "y", "dmat", "maxent01s", "maxent01v", "maxent01j", "maxent01y", "max_minsize_as_function_of_ancsize")
> 
> 			for (tmppval in params_to_print)
+ 				{
+ 				cmdstr = paste(	"cat('", tmppval, "', ':\n', sep='')", sep="")
+ 				eval(parse(text=cmdstr))
+ 			
+ 				# Get the value
+ 				cmdstr = paste("tmppval = ", tmppval, sep="")
+ 				eval(parse(text=cmdstr))
+ 			
+ 				# Print it
+ 				print(tmppval)
+ 				}
tmpca_1:
 [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
tmpcb_1:
 [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
l:
[[1]]
[1] 0

[[2]]
[1] 1

[[3]]
[1] 2

[[4]]
[1] 3

[[5]]
[1] 0 1

[[6]]
[1] 0 2

[[7]]
[1] 0 3

[[8]]
[1] 1 2

[[9]]
[1] 1 3

[[10]]
[1] 2 3

[[11]]
[1] 0 1 2

[[12]]
[1] 0 1 3

[[13]]
[1] 0 2 3

[[14]]
[1] 1 2 3

[[15]]
[1] 0 1 2 3

s:
[1] 1
v:
[1] 1
j:
[1] 0
y:
[1] 1
dmat:
     [,1] [,2] [,3] [,4]
[1,]    1    1    1    1
[2,]    1    1    1    1
[3,]    1    1    1    1
[4,]    1    1    1    1
maxent01s:
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    1    0    0    0
[3,]    1    0    0    0
[4,]    1    0    0    0
maxent01v:
     [,1] [,2] [,3] [,4]
[1,]    0    0    0    0
[2,]    1    0    0    0
[3,]    1    0    0    0
[4,]    1    0    0    0
maxent01j:
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    1    0    0    0
[3,]    1    0    0    0
[4,]    1    0    0    0
maxent01y:
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    1    0    0    0
[3,]    1    0    0    0
[4,]    1    0    0    0
max_minsize_as_function_of_ancsize:
[1] 1 1 1 1
> 
> 
> 
> m
[1] 1 1
> m_null_range
Error: object 'm_null_range' not found
> include_null_range
[1] TRUE
> jts_matrix
NULL
> numstates_in_cladogenesis_matrix
[1] 15
> 	if (include_null_range == TRUE)
+ 		{
+ 		numstates_in_cladogenesis_matrix = length(states_list) - 1
+ 		}
> 	if (include_null_range == FALSE)
+ 		{
+ 		numstates_in_cladogenesis_matrix = length(states_list) - 0
+ 		}
> 
> numstates_in_cladogenesis_matrix
[1] 15
> 		COO_weights_columnar = rcpp_calc_anclikes_sp_COOweights_faster(Rcpp_leftprobs=tmpca_1, Rcpp_rightprobs=tmpcb_1, l=l, s=s, v=v, j=j, y=y, dmat=dmat, maxent01s=maxent01s, maxent01v=maxent01v, maxent01j=maxent01j, maxent01y=maxent01y, max_minsize_as_function_of_ancsize=max_minsize_as_function_of_ancsize, printmat=printmat, m=m, m_null_range=include_null_range, jts_matrix=jts_matrix)
> 
> COO_weights_columnar
[[1]]
  [1]  0  1  2  3  4  4  5  5  6  6  7  7  8  8  9  9 10 10 10 11 11 11 12 12 12 13 13 13 14 14 14 14  4  4  5  5  6  6  7
 [40]  7  8  8  9  9 10 10 10 11 11 11 12 12 12 13 13 13 14 14 14 14  4  4  5  5  6  6  7  7  8  8  9  9 10 10 10 11 11 11
 [79] 12 12 12 13 13 13 14 14 14 14 10 10 10 11 11 11 12 12 12 13 13 13 14 14 14 14  8  9 10 11 12 12 13 13 14 14 15 15 16
[118] 16 17 17 18 18 18 19 19 19 20 20 20 21 21 21 22 22 22 22 12 12 13 13 14 14 15 15 16 16 17 17 18 18 18 19 19 19 20 20
[157] 20 21 21 21 22 22 22 22 12 12 13 13 14 14 15 15 16 16 17 17 18 18 18 19 19 19 20 20 20 21 21 21 22 22 22 22 18 18 18
[196] 19 19 19 20 20 20 21 21 21 22 22 22 22

[[2]]
  [1]  0  1  2  3  4  4  5  5  6  6  7  7  8  8  9  9 10 10 10 11 11 11 12 12 12 13 13 13 14 14 14 14  0  1  0  2  0  3  1
 [40]  2  1  3  2  3  0  1  2  0  1  3  0  2  3  1  2  3  0  1  2  3  1  0  2  0  3  0  2  1  3  1  3  2  7  5  4  8  6  4
 [79]  9  6  5  9  8  7 13 12 11 10  0  1  2  0  1  3  0  2  3  1  2  3  0  1  2  3  8  9 10 11 12 12 13 13 14 14 15 15 16
[118] 16 17 17 18 18 18 19 19 19 20 20 20 21 21 21 22 22 22 22  8  9  8 10  8 11  9 10  9 11 10 11  8  9 10  8  9 11  8 10
[157] 11  9 10 11  8  9 10 11  9  8 10  8 11  8 10  9 11  9 11 10 15 13 12 16 14 12 17 14 13 17 16 15 21 20 19 18  8  9 10
[196]  8  9 11  8 10 11  9 10 11  8  9 10 11

[[3]]
  [1]  0  1  2  3  0  1  0  2  0  3  1  2  1  3  2  3  0  1  2  0  1  3  0  2  3  1  2  3  0  1  2  3  4  4  5  5  6  6  7
 [40]  7  8  8  9  9 10 10 10 11 11 11 12 12 12 13 13 13 14 14 14 14  0  1  0  2  0  3  1  2  1  3  2  3  0  1  2  0  1  3
 [79]  0  2  3  1  2  3  0  1  2  3  7  5  4  8  6  4  9  6  5  9  8  7 13 12 11 10  8  9 10 11  8  9  8 10  8 11  9 10  9
[118] 11 10 11  8  9 10  8  9 11  8 10 11  9 10 11  8  9 10 11 12 12 13 13 14 14 15 15 16 16 17 17 18 18 18 19 19 19 20 20
[157] 20 21 21 21 22 22 22 22  8  9  8 10  8 11  9 10  9 11 10 11  8  9 10  8  9 11  8 10 11  9 10 11  8  9 10 11 15 13 12
[196] 16 14 12 17 14 13 17 16 15 21 20 19 18

[[4]]
  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [60] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[119] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[178] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1

> 